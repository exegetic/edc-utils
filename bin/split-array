#!/usr/bin/env bash
set -euo pipefail    ## "strict mode": exit on command errs or undefined vars

###|  Usage: {{{script_name}}} DELIMITER STRING...
 ##|  Splits a set of STRINGS into an array on DELIMITER.
 ##:  
 ##:  By Nathan Winant <nw@exegetic.net>
 ##|  
 ##|  Examples:
 ##|  
 ##|    > {{{script_name}}} " " foo bar baz
 ##|    foo
 ##|    bar
 ##|    baz
 ##|    
 ##|    > {{{script_name}}} : $PATH
 ##|    /usr/local/sbin
 ##|    /usr/local/bin
 ##|    /usr/sbin
 ##|    /usr/bin
 ##|    /sbin
 ##|    /sbin
 ##|    /bin
 ##|    (etc.)
 ##|  
 ##|  Options:
 ##|    -h, --help                 display this help and exit
 ###

##|  Constants
declare -r script_path="${BASH_SOURCE[0]}"
declare -r script_name=$(basename "${script_path}")
declare -r   delimiter="${1:-}"
declare -r       array="${@:2}"


##----|  Functions  |--------------------------------------------------------##

print_usage() {
  local -r doc_prefix="^[# ]##|  "
  cat "${script_path}"             \
      | grep -e "${doc_prefix}"    \
      | sed -e "s/${doc_prefix}//g" -e "s/{{{script_name}}}/${script_name}/g"
}

echo_err() {  echo "${script_path}: $@" >&2 ; }

main() {
  local -r original_IFS=$IFS;
  local             IFS=$delimiter;
  local -r       tokens=($array)
  local             IFS=$original_IFS;
  for token in "${tokens[@]}" ; do
    echo "${token}"
  done
}


##----|  Initialize & Run |--------------------------------------------------##

##|  Process options
while getopts ":h-:" optchar; do
  case "${optchar}" in
    -) case "${OPTARG:-}" in
         help) print_usage                              ; exit 0 ;;
            *) echo_err "Illegal option: --${OPTARG:-}" ; exit 1 ;;
       esac;;
    h) print_usage                                      ; exit 0 ;;
    *) echo_err "Illegal option: -${OPTARG:-}"          ; exit 1 ;;
  esac
done
shift $((OPTIND-1))

##|  Validate args
if (( $# < 2 )) ; then
  echo_err "Requires at least 2 arguments. Re-run with -h flag for usage docs."
  exit 1
fi

main

exit 0

